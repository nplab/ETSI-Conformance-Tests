//
// Copyright (c) 2015 Julian Cordes, Nils Frenking, Jens Hoelscher
// Copyright (c) 2015 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

// Disable extensions to minimize the parameters sent in INIT-ACK chunks
 0.0 `sysctl -i net.inet.sctp.ecn_enable=0`
+0.0 `sysctl -i net.inet.sctp.pr_enable=0`
+0.0 `sysctl -i net.inet.sctp.asconf_enable=0`
+0.0 `sysctl -i net.inet.sctp.pktdrop_enable=0`
+0.0 `sysctl -i net.inet.sctp.reconfig_enable=0`
+0.0 `sysctl -i net.inet.sctp.auth_enable=0`    // FreeBSD 11 and higher
+0.0 `sysctl -i net.inet.sctp.auth_disable=1`   // FreeBSD 9.x and 10.x
+0.0 `sysctl -i net.inet.sctp.nrsack_enable=0`  // FreeBSD 11 and higher
+0.0 `sysctl -i net.inet.sctp.nrsack_on_off=0`  // FreeBSD 9.x and 10.x

// Create a blocking 1-to-1 style listening socket
+0.0 socket(..., SOCK_STREAM, IPPROTO_SCTP) = 3
+0.0 bind(3, ..., ...) = 0
+0.0 listen(3, 1) = 0
// Perform the passive associtation setup
+0.0 < sctp: INIT[flgs=0, tag=1, a_rwnd=1500, os=1, is=1, tsn=1,
                  PARAMETER[type=0xc0cc, len=8, val=[0x01, 0x01, 0x01, 0x01]],
                  PARAMETER[type=0x00cc, len=8, val=[0x02, 0x02, 0x02, 0x02]],
                  PARAMETER[type=0xc0cc, len=8, val=[0x03, 0x03, 0x03, 0x03]]]
+0.0 > sctp: INIT_ACK[flgs=0, tag=2, a_rwnd=..., os=..., is=..., tsn=1,
                      STATE_COOKIE[len=..., val=...],
                      UNRECOGNIZED_PARAMETER[params=[PARAMETER[type=0xc0cc, len=8, val=[0x01, 0x01, 0x01, 0x01]]]]]
+0.0 < sctp: COOKIE_ECHO[flgs=0, len=..., val=...]
+0.0 > sctp: COOKIE_ACK[flgs=0]
// Check if the setup was sucessful
+0.0 accept(3, ..., ...) = 4
+0.0 close(3) = 0
// Tear down the association
+0.0 < sctp: SHUTDOWN[flgs=0, cum_tsn=0]
+0.0 > sctp: SHUTDOWN_ACK[flgs=0]
+0.0 < sctp: SHUTDOWN_COMPLETE[flgs=0]
+0.0 close(4) = 0
